//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_DATA
============
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_DATA(name, type_arity, constructors) \
  // unspecified
--------------------------------------


Description
-----------

Macro for defining a Haskell-like algebraic data type for template metaprograms.
+constructors+ is the list of constructors, represented as a sequence of two
element tuples. Each tuple describes one constructor. The first element of the
tuple is the name, the second element is the arity of the constructor. The
values can be compared using +boost::mpl::equal_to+.

The +::tag+ of the values is +mpllibs::metamonad::algebraic_data_type_tag+
indicating that the values belong to an algebraic data-type. A custom tag
(+name_tag+) is defined for each algebraic data-type.

+type_arity+ is the number of type arguments. When there are one or more type
arguments, the tag of the data type becomes a template class with +type_arity+
arguments. The arguments are also algebraic data type tags. When a tag is not
specified, it is +boost::mpl::void_+. The tag of the data type has this as
default values for all template arguments.

When a constructor is evaluated, it instantiates itself with the evaluated
results of the original constructor arguments. When the constructor is
instantiated with template metaprogramming values, it is a template
metaprogramming value itself as well.

Header
------

--------------------------------------
#include <mpllibs/metamonad/data.hpp>
--------------------------------------

Expression semantics
--------------------

The following

--------------------------------------
MPLLIBS_DATA(name, 0, ((c1, 2))((c2, 0)));
--------------------------------------

is equivalent to

--------------------------------------
struct name_tag : metamonad::mpl_tag<name_tag> {};

template <class T0, class T1>
struct c1
{
  typedef c1<typename T0::type, typename T1::type> type;
  typedef mpllibs::metamonad::algebraic_data_type_tag tag;
};

struct c2
{
  typedef c2 type;
  typedef mpllibs::metamonad::algebraic_data_type_tag tag;
};
--------------------------------------

For any +n > 0+ the following

--------------------------------------
MPLLIBS_DATA(name, n, ((c1, 2))((c2, 0)));
--------------------------------------

is equivalent to

--------------------------------------
template <class T1 = boost::mpl::void_, ..., class Tn = boost::mpl::void_>
struct name_tag : metamonad::mpl_tag<name_tag<T0, ..., Tn>> {};

template <class T0, class T1>
struct c1
{
  typedef c1<typename T0::type, typename T1::type> type;
  typedef mpllibs::metamonad::algebraic_data_type_tag tag;
};

struct c2
{
  typedef c2 type;
  typedef mpllibs::metamonad::algebraic_data_type_tag tag;
};
--------------------------------------

Example
-------

--------------------------------------
MPLLIBS_DATA(maybe, 1, ((nothing, 0))((just, 1)));
--------------------------------------

include::copyright[]

link:reference.html[[up]]




//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

is_same
=======
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class A, class B>
struct is_same
{
  // unspecified
};
--------------------------------------


Description
-----------

Lazy template metafunction with currying support for comparing two types. It
returns a boolean value indicating if the two types are identical.

Header
------

--------------------------------------
#include <mpllibs/metamonad/is_same.hpp>
--------------------------------------

Expression semantics
--------------------

For any +a+ and +b+ types, for which +a::type+ and +b::type+ are not identical
the following evaluate to true:

--------------------------------------
mpl::not_<is_same<a, b>::type>
is_same<a, a>::type
is_same<b, b>::type
--------------------------------------

Example
-------

--------------------------------------
is_same<box<int>, box<double>>
--------------------------------------

include::copyright[]

link:reference.html[[up]]




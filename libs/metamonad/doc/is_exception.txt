//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

is_exception
============
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class Data>
struct is_exception
{
  // unspecified
};
--------------------------------------


Description
-----------

Metafunction checking if its argument is an link:exception.html[exception]
value. It expects a nullary metafunction as argument.

Header
------

--------------------------------------
#include <mpllibs/metamonad/is_exception.hpp>
--------------------------------------

Expression semantics
--------------------

For any +d+ class the following evaluates to +true+

--------------------------------------
is_exception<exception<d> >
--------------------------------------

For any +c+ class, that is not an instance of the +exception+ template, the
following evaluates to +true+

--------------------------------------
boost::mpl::not_<is_exception<c>::type>
--------------------------------------

Example
-------

--------------------------------------
typedef is_exception<mpllibs::metaparse::exception<int>::type> always_true;
--------------------------------------

include::copyright[]

link:reference.html[[up]]




// Copyright Istvan Siroki (stevesiroki@gmail.com) 2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

//  THIS FILE IS GENERATED BY ./gen_test.regress.pl 
//  DO NOT EDIT MANUALLY!!!

#define BOOST_TEST_DYN_LINK

#include <mpllibs/xlxpressive/regexp_grammar.hpp>

#include <mpllibs/metatest/boost_test.hpp>
#include <boost/test/unit_test.hpp>

#include <boost/mpl/string.hpp>

#include <string>

#include "search.regress.hpp"

BOOST_AUTO_TEST_CASE(test_grammar_regress)
{
  std::vector<std::string> matched;
  //Number of test cases: 5

  BOOST_REQUIRE(true); //perl test
  matched.push_back("foo");
  typedef boost::mpl::string< 'foo' > Regexp0;
  BOOST_REQUIRE(search< Regexp0 >("foobarboo", matched) );
  matched.clear();

  BOOST_REQUIRE(true); //perl test
  matched.push_back("bar");
  typedef boost::mpl::string< 'bar' > Regexp1;
  BOOST_REQUIRE(search< Regexp1 >("foobarboo", matched) );
  matched.clear();

  BOOST_REQUIRE(true); //perl test
  typedef boost::mpl::string< 'bat' > Regexp2;
  BOOST_REQUIRE(search< Regexp2 >("foobarboo", matched) );
  matched.clear();

  BOOST_REQUIRE(true); //perl test
  matched.push_back("bar");
  typedef boost::mpl::string< 'b.*a','r' > Regexp3;
  BOOST_REQUIRE(search< Regexp3 >("foobarboo", matched) );
  matched.clear();

  BOOST_REQUIRE(true); //perl test
  matched.push_back("bar");
  typedef boost::mpl::string< 'b.*r' > Regexp4;
  BOOST_REQUIRE(search< Regexp4 >("foobarboo", matched) );
  matched.clear();
}


Copyright Istvan Siroki (stevesiroki@gmail.com)  2012 - 2013.
Distributed under the Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt or copy at
         http://www.boost.org/LICENSE_1_0.txt)

1. Tranform normal regular expression -given as a string- into
   expression template to make its user interface nicer and more
   natural. Report error, if tranformation isn't possible i.e. the
   regular expression is not valid.
2. Transform like above and validate, since the string need to be
   parsed anyway, we can report not supported regular expresions. In
   this case, why we need the compile-time error functionality which
   static regexes provide?
3. Validate regex and use the run-time regex interface to 'compile' the
   regular expression.

<REG_EXP>       ::= ['^']['$']
<GROUP_EXP>     ::= (<EXP>)
<BRACKET_EXP>   ::= [<NEGATE><RANGE>]|[RANGE]|[CHAR_GROUP]
<RANGE>         ::= <DIGIT>-<DIGIT>|<LETTERS>
<CHAR_GROUP>    ::= ':alnum:'|':alpha:'|':blank:'|':cntrl:'|':digit:'|':graph:'|':lower:'|':print:'|':punct:'|':space:'|':upper:'|':xdigit:'
<EXP>           ::= 
<MULT_SIGN>     ::= *|+|?
<CHARACTER>     ::= <LETTER>|<DIGIT>
<LETTERS>       ::= <LETTER>|<LETTERS><LETTER>
<LETTER>        ::= 
<DIGIT>         ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'


